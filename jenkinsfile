pipeline{
    agent any;
     tools{
       maven 'maven'
       jdk 'Jdk'
   }
    stages{
        stage('Fetch project from github'){
            steps{
                git branch: 'master', url: 'https://github.com/roshenreji/todo-app-Azure-DevOps.git'
            }
                
        }
        stage('Maven package'){
            steps{
                sh 'mvn -f app/pom.xml package'

            }
        }
        stage('sonar analysis'){
            steps{
                withSonarQubeEnv('SonarCloud'){
                    sh 'mvn -f app/pom.xml sonar:sonar'
                }
            }
        }
        stage('deploy to artifactor'){
            steps{
                rtUpload (
            serverId: 'JfrogId',
            spec: '''{
                 "files": [
                             {
                                "pattern": "app/target/*.war",
                                "target": "art-doc-dev-loc/todo-app/"
                            }
                        ]
            }''',
            )

            }
        }
        stage('download artifact'){
            steps{
                 rtDownload (
                 serverId: "JfrogId",
                spec:"""{
                     "files": [
                                {
                                    "pattern": "art-doc-dev-loc/todo-app/**",
                                    "target": "app/artifacts/"      
                                }
                            ]
              }"""
            )
            
            }
        }

        
        stage('Docker build'){
            steps{
               
                    sh 'docker image prune -a --force'
                    sh 'docker-compose build'
                
                
            }
        }
        stage('Pushing images to docker hub'){
            steps{
                

                withCredentials([string(credentialsId: 'dockerpswd', variable: 'dockerHubPWD')]) {
                            // some block
                   sh "docker login -u roshenreji -p ${dockerHubPWD}"

                }
                sh "docker tag ci-cd_app roshenreji/todo-app-new:v${env.BUILD_ID}"
                sh "docker push roshenreji/todo-app-new:v${env.BUILD_ID}"

            }
        }
        stage('deploying it to kubernetes'){
            steps{
                sh 'chmod +x change-tag.sh'
                sh """./change-tag.sh v${env.BUILD_ID}"""
                sh 'cat k8s/api-deployment.yaml'
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-newconfig', namespace: '', serverUrl: 'https://brave-rodent-k8s-9a144257.hcp.westus2.azmk8s.io:443') {
                                // some block
                    sh 'kubectl apply -f k8s/database-deployment.yaml'
                    
                }
                sleep(120)
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-newconfig', namespace: '', serverUrl: 'https://brave-rodent-k8s-9a144257.hcp.westus2.azmk8s.io:443 ') {
                                // some block
                    sh 'kubectl apply -f k8s/api-deployment.yaml'
                    sh 'kubectl get pods'
                    sh 'kubectl get svc'
                    
                }

            }
        }
    

    }
}
